LinkedHashMap
    是HashMap的子类
    内部有一个双向链表维护键值对的顺序，每一个键值既位于哈希表中又位于双向链表中
    支持两种顺序：一种是插入顺序，一种是访问顺序
        插入顺序：
            使用场景：1)按照原来的顺序输出；2) 购物车按照用户添加的顺序存储；3)按键有序，但是键已经通过其他方式排序好了，没必要使用TreeMap
        访问顺序：
            使用场景：1)缓存
    public LinkedHashMap(int initialCapacity,float loadFactor,boolean accessOrder) {
        当accessOrder为true就是表示按照访问顺序
    }

    head的after指向第一个节点，before指向最后一个节点
    transient LinkedHashMap.Entry<K,V> head;

    static class Entry<K,V> extends HashMap.Node<K,V> {
        //新添一个before和after,分别指向列表中的前驱和后继
        Entry<K,V> before, after;
        Entry(int hash, K key, V value, Node<K,V> next) {
            super(hash, key, value, next);
        }
    }

    LinkedHashMap内部维护了一个双向链表，每个节点既位于hash表中，又位于双向链表中
