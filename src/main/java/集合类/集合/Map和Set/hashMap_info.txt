HashMap的随机生成
    实例变量
        transient Node<K,V>[] table;
        transient Set<Map.Entry<K,V>> entrySet;
        transient int size;
        //table数组扩容，键值对个数大于等于该值时扩容
        int threshold;
        final float loadFactor;
    其中transient表示暂时变量，在对象存储的时候不需要维持，不参与序列化过程
    HashMap的加值方法
        public V put(K key, V value) {
            return putVal(hash(key), key, value, false, true);
        }
        final V putVal(int hash, K key, V value, boolean onlyIfAbsent,boolean evict) {
               Node<K,V>[] tab; Node<K,V> p; int n, i;
               //1.首先表为空或者长度为0进行扩容
               if ((tab = table) == null || (n = tab.length) == 0)
                   n = (tab = resize()).length;
               if ((p = tab[i = (n - 1) & hash]) == null)
                   tab[i] = newNode(hash, key, value, null);
               else {
                   Node<K,V> e; K k;
                   //首先判断是否已经存在这样的链表
                   //先比较hash值，如果hash值不同的话也就没必要比较后面的了
                   if (p.hash == hash &&
                       ((k = p.key) == key || (key != null && key.equals(k))))
                       e = p;
                   else if (p instanceof TreeNode)
                       e = ((TreeNode<K,V>)p).putTreeVal(this, tab, hash, key, value);
                   else {
                       for (int binCount = 0; ; ++binCount) {
                           if ((e = p.next) == null) {
                               p.next = newNode(hash, key, value, null);
                               if (binCount >= TREEIFY_THRESHOLD - 1) // -1 for 1st
                                   treeifyBin(tab, hash);
                               break;
                           }
                           if (e.hash == hash &&
                               ((k = e.key) == key || (key != null && key.equals(k))))
                               break;
                           p = e;
                       }
                   }
                   if (e != null) { // existing mapping for key
                       V oldValue = e.value;
                       if (!onlyIfAbsent || oldValue == null)
                           e.value = value;
                       afterNodeAccess(e);
                       return oldValue;
                   }
               }
               ++modCount;
               if (++size > threshold)
                   resize();
               afterNodeInsertion(evict);
               return null;
         }


         final Node<K,V>[] resize() {
             Node<K,V>[] oldTab = table;
             int oldCap = (oldTab == null) ? 0 : oldTab.length;
             int oldThr = threshold;
             int newCap, newThr = 0;
             //首先第一步判断原来的长度是否大于0
             if (oldCap > 0) {
                 原长度大于最大容量2^30,直接返回最大长度
                 if (oldCap >= MAXIMUM_CAPACITY) {
                     threshold = Integer.MAX_VALUE;
                     return oldTab;
                 }
                 //否则，设置为原来长度的两倍，newThr设置为原来的两倍
                 else if ((newCap = oldCap << 1) < MAXIMUM_CAPACITY &&
                          oldCap >= DEFAULT_INITIAL_CAPACITY)
                     newThr = oldThr << 1; // double threshold
             }
             //原长度为0，原Thr不为0，则直接设置新长度为原Thr
             else if (oldThr > 0) // initial capacity was placed in threshold
                 newCap = oldThr;
             else {               // zero initial threshold signifies using defaults
             //使用默认长度，容量为2^4,thr为0.75*16
                 newCap = DEFAULT_INITIAL_CAPACITY;
                 newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);
             }
             if (newThr == 0) {
                 float ft = (float)newCap * loadFactor;
                 newThr = (newCap < MAXIMUM_CAPACITY && ft < (float)MAXIMUM_CAPACITY ?
                           (int)ft : Integer.MAX_VALUE);
             }
             threshold = newThr;
             @SuppressWarnings({"rawtypes","unchecked"})
                 Node<K,V>[] newTab = (Node<K,V>[])new Node[newCap];
             table = newTab;
             //进行扩容
             if (oldTab != null) {
                 //对原来的进行遍历
                 for (int j = 0; j < oldCap; ++j) {
                     Node<K,V> e;
                     if ((e = oldTab[j]) != null) {
                         oldTab[j] = null;
                         if (e.next == null)//只有当前一个元素
                             newTab[e.hash & (newCap - 1)] = e;
                         else if (e instanceof TreeNode)//这里暂时先不考虑
                             ((TreeNode<K,V>)e).split(this, newTab, j, oldCap);
                         else { // preserve order
                             //将hash值小于原长度的节点放在loHead下，同时放在表newTab[j]下
                             //将hash值大于原长度的节点放在hiHead下，同时放在表newTab[j+oldCap]下
                             Node<K,V> loHead = null, loTail = null;
                             Node<K,V> hiHead = null, hiTail = null;
                             Node<K,V> next;
                             do {
                                 next = e.next;
                                 if ((e.hash & oldCap) == 0) {
                                     if (loTail == null)
                                         loHead = e;
                                     else
                                         loTail.next = e;
                                     loTail = e;
                                 }
                                 else {
                                     if (hiTail == null)
                                         hiHead = e;
                                     else
                                         hiTail.next = e;
                                     hiTail = e;
                                 }
                             } while ((e = next) != null);
                             if (loTail != null) {
                                 loTail.next = null;
                                 newTab[j] = loHead;
                             }
                             if (hiTail != null) {
                                 hiTail.next = null;
                                 newTab[j + oldCap] = hiHead;
                             }
                         }
                     }
                 }
             }
             return newTab;
         }

     HashMap是支持key=null的，key=null時放在table[0]位置上
     HashMap是线程不安全的，如果不需要考虑线程的情况下使用HashMap,否则使用ConcurrentHashMap



