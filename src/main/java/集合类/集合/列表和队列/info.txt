迭代
    ArrayList支持foreach,
    内部实现原理其实是调用了iterator接口
        Iterator<E> it = list.iterator();
        while(it.hasNext()){
            System.out.println(it.next())
        }
    之所以支持是因为实现了iterable接口,而Iterable接口有一个Iterator方法。
    public interface Iterator<E> {
        boolean hasNext()
        E next()
        void remove()
    }

    迭代器内部会维护一些索引位置和相关数据，所以容器的结构不能发生变化（增，删），否则会报ConcurrentModificationException异常，
    在调用迭代器本身的remove方法时需要先调用next()方法，否则会报IllegalStateException()
    public E next() {
        checkForComodification();
        int i = cursor;
        if (i >= size)
            throw new NoSuchElementException();
        Object[] elementData = ArrayList.this.elementData;
        if (i >= elementData.length)
            throw new ConcurrentModificationException();
        cursor = i + 1;
        return (E) elementData[lastRet = i];
    }
    public void remove() {
        if (lastRet < 0)
            throw new IllegalStateException();
        checkForComodification();

        try {
            ArrayList.this.remove(lastRet);
            cursor = lastRet;
            lastRet = -1;
            expectedModCount = modCount;
        } catch (IndexOutOfBoundsException ex) {
            throw new ConcurrentModificationException();
        }
    }

LinkedList
   LinkedList实现了Queue接口，queue接口扩展了Collection接口，主要操作有三个：
        1.在尾部添加元素（add、offer）
        2.查看头部元素（element、peek）
        3.删除头部元素（remove、poll）
        队列为空时：element和remove操作会抛出异常，peek和poll会返回null
        队列满时：add会抛出异常，offer返回false

    LinkedList的实现时双向链表
    LinkedList按照索引位置查找挺有意思的，首先取中间位置，分别从0-mid(nextNode)和mid-end(preNode)进行查找